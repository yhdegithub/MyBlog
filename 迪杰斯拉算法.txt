import java.util.*;

public class Solution {
    static int inf = Integer.MAX_VALUE;

    public static void main(String args[]) {
        int map[][] = {
                {inf, 1, inf, 7, inf},
                {1, inf, 2, 3, inf},
                {inf, 2, inf, 4, 6},
                {7, 3, 4, inf, 1},
                {inf, inf, 6, 1, inf}
        };
        int start = 0;
        for (int i = 0; i < map.length; i++) {
            new Solution().distance(map, i);
            System.out.println("-----------------------");
        }


    }

    public int distance(int map[][], int start) {
        int n = map.length;
        //
        boolean visit[] = new boolean[n];
        int d[] = new int[n];
        //初始化start的函数
        for (int i = 0; i < n; i++)
            d[i] = map[start][i];
        visit[start] = true;
        ///
        for (int i = 0; i < n; i++) {
			if(start==i) continue;
            int min = Integer.MAX_VALUE;
            int k = -1;  //最近加入的结点
            for (int j = 0; j < n; j++)
                if (!visit[j] && d[j] < min) {
                    min = d[j];
                    k = j;
                }
            if (k == -1) break;
            visit[k] = true;
            for (int j = 0; j < n; j++) {

                if (!visit[j] && map[k][j] != inf) {
                    d[j] = Math.min(d[k] + map[k][j], d[j]);
                }

            }
        }


        for (int l = 0; l < n; l++)
            System.out.println(start + "到结点" + l + "最小距离是:" + d[l]);
        return 0;
    }


}